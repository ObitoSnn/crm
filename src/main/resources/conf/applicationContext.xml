<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--加载配置文件-->
    <context:property-placeholder location="classpath:conf/jdbc.properties"/>

    <!--声明数据源DataSource(Druid数据库连接池)，作用：连接数据库-->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!--set注入给DruidDataSources实例提供连接数据库的信息-->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--设置最大连接池数量-->
        <property name="maxActive" value="${jdbc.maxActive}"/>
    </bean>

    <!--
        声明的是mybatis中提供的SqlSessionFactoryBean类，
        这个类内部创建SqlSessionFactory
    -->
    <bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--set注入，将DruidDataSources实例赋给dataSource属性，表明使用druid连接池-->
        <property name="dataSource" ref="druidDataSource"/>
        <!--
            configLocation是Resource类型的，set注入比较特殊，使用value
        -->
        <property name="configLocation" value="classpath:conf/mybatis.xml"/>
    </bean>

    <!--声明式事务处理：和源代码完全分离-->
    <!--声明事务管理器对象-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource"/>
    </bean>

    <!--配置aop-->
    <aop:config>
        <!--配置切入点表达式：指定哪些包中的类要使用事务
            id：切入点表达式的名称，唯一值
            expression：切入点表达式，指定哪些类的哪些方法要使用事务，aspectj会创建代理对象
        -->
        <aop:pointcut id="servicePointCut" expression="execution(* *..service..*.*(..))"/>

        <!--配置增强器：关联advice和pointcut
            advice-ref：通知
            pointcut-ref：切入点表达式的id
        -->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePointCut"/>
    </aop:config>

    <!--声明业务方法的事务属性
        事务属性：
            隔离级别、传播行为、超时时间
        id：自定义名称，表示 <tx:advice> 和 </tx:advice>
        transaction-manager：事务管理器
    -->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
        <!--tx:attributes：配置事务属性-->
        <tx:attributes>
            <!--tx:method：给具体方法配置事务属性，method可以有多个，分别给不同方法设置事务属性
                name：方法名称
                    1）完整的方法名称，不带有包和类
                    2）方法可以使用通配符, * 表示任意字符
                propagation：传播行为
                isolation：隔离级别
                rollback-for：指定的异常类型，全限定类名，发生异常一定回滚事务，多个异常类型用,隔开
                    默认是运行时异常
            -->
            <!--使用通配符，指定多个方法-->
            <tx:method name="save*" propagation="REQUIRED" isolation="REPEATABLE_READ" rollback-for="java.lang.Throwable"/>
            <tx:method name="delete*" propagation="REQUIRED" isolation="REPEATABLE_READ" rollback-for="java.lang.Throwable"/>
            <tx:method name="update*" propagation="REQUIRED" isolation="REPEATABLE_READ" rollback-for="java.lang.Throwable"/>
        </tx:attributes>
    </tx:advice>

    <!--声明dao对象
        SqlSession.getMapper(Class<T> tClass);
        MapperScannerConfigurer：在内部调用getMapper(Class<T> tClass)，生成每个dao接口代理对象
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定SqlSession的id-->
        <property name="sqlSessionFactoryBeanName" value="factory"/>
        <!--指定dao接口所在的包名
           MapperScannerConfigurer会扫描这个包中的所有接口，把每个接口都执行一次
           getMapper(Class<T> tClass)得到每个接口的dao对象。
           创建好的dao对象放入到spring的容器中
           dao对象的名称默认是接口名首字母小写

           使用,或;分割多个包
       -->
        <property name="basePackage" value="com.obitosnn.crm.settings.dao,com.obitosnn.crm.workbench.dao"/>
    </bean>
    <!--声明系统设置模块中Service对象-->
    <context:component-scan base-package="com.obitosnn.crm.settings.service"/>

    <!--声明工作台模块Service对象-->
    <context:component-scan base-package="com.obitosnn.crm.workbench.service"/>

</beans>